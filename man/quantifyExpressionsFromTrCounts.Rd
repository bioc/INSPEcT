% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantifyExpressionsFromTrCounts-functions.R
\name{quantifyExpressionsFromTrCounts}
\alias{quantifyExpressionsFromTrCounts}
\title{Evaluates introns and exons RPKMs, per gene, from counts data.}
\usage{
quantifyExpressionsFromTrCounts(libsize, exonsWidths, intronsWidths, allcounts,
  by = c("gene", "tx"), DESeq2 = TRUE, experimentalDesign,
  varSamplingCondition = NULL)
}
\arguments{
\item{libsize}{A numeric reporting the number of assigned reads.}

\item{exonsWidths}{A numeric containing the exons widths.}

\item{intronsWidths}{A numeric containing the intorns widths.}

\item{allcounts}{A list object containing introns and exons counts.}

\item{by}{A character, either "gene" or "tx", indicating if rpkms and counts should be summarized at the levels of genes or transcripts. "gene" by default}

\item{DESeq2}{A logical, if TRUE the RPKMs variances are evaluated through the package DESeq2, if FALSE plgem is used.}

\item{experimentalDesign}{A numerical which reports the desing of the experiment in terms of time points and replicates. The time points must be ordered according
to the columns of the count matrices submitted for the analysis; these labels define conditions and replicates.}

\item{varSamplingCondition}{A character reporting which experimental condition should be used to sample the fatiance if DESeq2 = FALSE.}
}
\value{
A list containing RPKMs and associated variances for exons and introns.
}
\description{
Evaluates introns and exons RPKMs, per gene, from counts data.
}
\examples{
data('allcounts', package='INSPEcT')

nascentCounts<-allcounts$nascent
matureCounts<-allcounts$mature

testGenes<-rownames(matureCounts$exonsCounts)

require(TxDb.Mmusculus.UCSC.mm9.knownGene)
txdb<-TxDb.Mmusculus.UCSC.mm9.knownGene

exonsDB<-reduce(exonsBy(txdb ,'gene'))
exonsDB<-exonsDB[elementNROWS(range(exonsDB))==1]
intronsDB<-psetdiff(unlist(range(exonsDB)),exonsDB)
intronsDB<-intronsDB[elementNROWS(intronsDB)>0]

exWdths<-sapply(width(exonsDB),sum)
intWdths<-sapply(width(intronsDB),sum)

exWdths<-exWdths[testGenes]
intWdths<-intWdths[testGenes]

nascentLS<-colSums(nascentCounts$
  stat[c('Assigned_Exons','Assigned_Introns'),,drop=FALSE])

totalLS<-colSums(matureCounts$
  stat[c('Assigned_Exons','Assigned_Introns'),,drop=FALSE])

expDes<-rep(c(0,1/6,1/3,1/2,1,1.5,2,4,8,12,16),3)

nasExp_DESeq2<-quantifyExpressionsFromTrCounts(libsize=nascentLS
                                              ,exonsWidths=exWdths
                                              ,intronsWidths=intWdths
                                              ,allcounts=nascentCounts
                                              ,DESeq2=TRUE
                                              ,experimentalDesign=expDes)

matExp_DESeq2<-quantifyExpressionsFromTrCounts(libsize=totalLS
                                              ,exonsWidths=exWdths
                                              ,intronsWidths=intWdths
                                              ,allcounts=matureCounts
                                              ,DESeq2=TRUE
                                              ,experimentalDesign=expDes)

vsc<-as.character(expDes[[1]])

nasExp_plgem<-quantifyExpressionsFromTrCounts(libsize=nascentLS
                                             ,exonsWidths=exWdths
                                             ,intronsWidths=intWdths
                                             ,allcounts=nascentCounts
                                             ,DESeq2=FALSE
                                             ,experimentalDesign=expDes
                                             ,varSamplingCondition=vsc)

matExp_plgem<-quantifyExpressionsFromTrCounts(libsize=totalLS
                                             ,exonsWidths=exWdths
                                             ,intronsWidths=intWdths
                                             ,allcounts=matureCounts
                                             ,DESeq2=FALSE
                                             ,experimentalDesign=expDes
                                             ,varSamplingCondition=vsc)
}
